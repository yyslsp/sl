#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('objtest:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
//生成项目端口号        process.env.PORT抓取环境变量
var port = normalizePort(process.env.PORT || '80');
app.set('port', port);//对等于app.losten(port)

/**
 * 创建http  原生web服务器
 */
//交给了app处理 createServer(函数 | express|koa实例)
var server = http.createServer(app);

/**
 * 监听服务器
 */

server.listen(port);//监听端口
server.on('error', onError);//监听错误
server.on('listening', onListening);//监听其他

/**
 * 
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * 访问了不存在的地址时  处理错误
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + '端口被占用了');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * 捕获一些其他响应事件，交由debug第三方模块来处理
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
